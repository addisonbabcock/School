'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34003
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34003.
'
Namespace com.cdyne.ws
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="IP2GeoSoap", [Namespace]:="http://ws.cdyne.com/")>  _
    Partial Public Class IP2Geo
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private ResolveIPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.BAIS3110WebServiceTest.My.MySettings.Default.BAIS3110WebServiceTest_com_cdyne_ws_IP2Geo
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event ResolveIPCompleted As ResolveIPCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/ResolveIP", RequestNamespace:="http://ws.cdyne.com/", ResponseNamespace:="http://ws.cdyne.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ResolveIP(ByVal ipAddress As String, ByVal licenseKey As String) As IPInformation
            Dim results() As Object = Me.Invoke("ResolveIP", New Object() {ipAddress, licenseKey})
            Return CType(results(0),IPInformation)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ResolveIPAsync(ByVal ipAddress As String, ByVal licenseKey As String)
            Me.ResolveIPAsync(ipAddress, licenseKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ResolveIPAsync(ByVal ipAddress As String, ByVal licenseKey As String, ByVal userState As Object)
            If (Me.ResolveIPOperationCompleted Is Nothing) Then
                Me.ResolveIPOperationCompleted = AddressOf Me.OnResolveIPOperationCompleted
            End If
            Me.InvokeAsync("ResolveIP", New Object() {ipAddress, licenseKey}, Me.ResolveIPOperationCompleted, userState)
        End Sub
        
        Private Sub OnResolveIPOperationCompleted(ByVal arg As Object)
            If (Not (Me.ResolveIPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ResolveIPCompleted(Me, New ResolveIPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ws.cdyne.com/")>  _
    Partial Public Class IPInformation
        
        Private cityField As String
        
        Private stateProvinceField As String
        
        Private countryField As String
        
        Private organizationField As String
        
        Private latitudeField As Double
        
        Private longitudeField As Double
        
        Private areaCodeField As String
        
        Private timeZoneField As String
        
        Private hasDaylightSavingsField As Boolean
        
        Private certaintyField As Short
        
        Private regionNameField As String
        
        Private countryCodeField As String
        
        '''<remarks/>
        Public Property City() As String
            Get
                Return Me.cityField
            End Get
            Set
                Me.cityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StateProvince() As String
            Get
                Return Me.stateProvinceField
            End Get
            Set
                Me.stateProvinceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Country() As String
            Get
                Return Me.countryField
            End Get
            Set
                Me.countryField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Organization() As String
            Get
                Return Me.organizationField
            End Get
            Set
                Me.organizationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Latitude() As Double
            Get
                Return Me.latitudeField
            End Get
            Set
                Me.latitudeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Longitude() As Double
            Get
                Return Me.longitudeField
            End Get
            Set
                Me.longitudeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AreaCode() As String
            Get
                Return Me.areaCodeField
            End Get
            Set
                Me.areaCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TimeZone() As String
            Get
                Return Me.timeZoneField
            End Get
            Set
                Me.timeZoneField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property HasDaylightSavings() As Boolean
            Get
                Return Me.hasDaylightSavingsField
            End Get
            Set
                Me.hasDaylightSavingsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Certainty() As Short
            Get
                Return Me.certaintyField
            End Get
            Set
                Me.certaintyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RegionName() As String
            Get
                Return Me.regionNameField
            End Get
            Set
                Me.regionNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CountryCode() As String
            Get
                Return Me.countryCodeField
            End Get
            Set
                Me.countryCodeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub ResolveIPCompletedEventHandler(ByVal sender As Object, ByVal e As ResolveIPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ResolveIPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As IPInformation
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),IPInformation)
            End Get
        End Property
    End Class
End Namespace
