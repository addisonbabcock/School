AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 1
by Simon Walker


                              1 				.title by Simon Walker
                              2 ;**************************************************************************
                              3 ;* Sample.asm                                                             *
                              4 ;*                                                                        *
                              5 ;* The purpose of this program is to demonstrate source file page layout  *
                              6 ;* and basic AS6811 assembler syntax.                                     *
                              7 ;**************************************************************************
                              8 
                              9 ;.------------------------------------------------------------------------.
                             10 ;|                           EQUATES SECTION                              |
                             11 ;`------------------------------------------------------------------------'
                             12 
   C000                      13 LED			=	0xC000			; 2-digit LED display.
   1040                      14 RAMSTART	=	0x1040			; first byte of large RAM block
   7FFF                      15 RAMEND		=	0x7FFF			; end of RAM
   FFFE                      16 RESETVEC	=	0xFFFE			; reset vector for normal modes
   C000                      17 ROMSTART	=	0xC000			; Lowest EPROM address.
   FFFF                      18 ROMEND		=	0xFFFF			; Highest EPROM address.
   0FFF                      19 STACKTOP	=	0x0FFF			; top of stack (0x0FFF - 0x0100)
                             20 
   1000                      21 PORTA		=	0x1000			; Port A data
   1026                      22 PACTL		=	0x1026			; Port A control
                             23 
   8000                      24 LCDIR		=	0x8000			; LCD instruction register
   8001                      25 LCDDR		=	0x8001			; LCD data register
                             26 
   102A                      27 SPDR		=	0x102A			;Data Register
   1028                      28 SPCR		=	0x1028			;Control Register
   1029                      29 SPSR		=	0x1029			;Status Register
   1009                      30 DDRD		=	0x1009			;Data Direction Register
   1008                      31 PORTD		=	0x1008			;Port D
                             32 
   100E                      33 TCNT		=	0x100E			;16-bit timer count register
   1016                      34 TOC1		=	0x1016			;timer output compare 1
   1018                      35 TOC2		=	0x1018			;timer output compare 2
   101A                      36 TOC3		=	0x101A			;timer output compare 3
   101C                      37 TOC4		=	0x101C			;timer output compare 4
   1020                      38 TCTL1		=	0x1020			;timer control register 1
   1021                      39 TCTL2		=	0x1021			;timer control register 2
   1022                      40 TMSK1		=	0x1022			;timer mask register 1
   1023                      41 TFLG1		=	0x1023			;timer flag register 1
   1024                      42 TMSK2		=	0x1024			;timer mask register 2
   1025                      43 TFLG2		=	0x1025			;timer flag register 2
                             44 
                             45 ;.------------------------------------------------------------------------.
                             46 ;|                           TARGET CONTROL                               |
                             47 ;`------------------------------------------------------------------------'
                             48 
                             49 ; set the following variable to 1 to place program in EEPROM
                             50 ; set the following variable to 0 to place program in RAM
                             51 
   0000                      52 TARGETROM = 0		; 0 == RAM, 1 == EEPROM
                             53 
                             54 ;.------------------------------------------------------------------------.
                             55 ;|                               MAIN                                     |
                             56 ;`------------------------------------------------------------------------'
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 2
by Simon Walker


                             57 
                             58 				.MODULE MAIN				
                             59 				.AREA   StartUp (ABS)
                             60 								
   0000                      61 				.if TARGETROM == 1
                             62 					.ORG    ROMSTART
                             63 				.else
                             64 					.ORG	RAMSTART					
                             65 				.endif
                             66 
   1040                      67 Main:			
   0000                      68 				.if TARGETROM == 1
                             69 					LDS		#STACKTOP		; must have stack!
                             70 				.endif
                             71 				
                             72 				; place your program here ********************
                             73 				
   1040 BD 14 5D             74 				jsr		sciInit
   1043 BD 15 E0             75 				jsr		adc_Init
   1046 BD 15 B5             76 				jsr		spi_init
   1049 BD 15 1B             77 				jsr		lcdInit
                             78 				
   104C CE 18 F2             79 				ldx		#CharacterData
   104F C6 30                80 				ldab	#6*8
   1051 BD 15 9C             81 				jsr		LCDCreate		;Load the bar graph chars into CGRAM
                             82 				
   1054 0F                   83 				sei
   1055 86 40                84 				ldaa	#0b01000000			;set OC2 to toggle
   1057 B7 10 20             85 				staa	TCTL1
   105A 86 40                86 				ldaa	#0b01000000			;enable IRQ from OC2
   105C B7 10 22             87 				staa	TMSK1
                             88 				
   105F 4F                   89 				clra						;init a couple vars
   1060 B7 19 75             90 				staa	Ticks
   1063 B7 19 76             91 				staa	RefreshTime
   1066 B7 19 81             92 				staa	PumpRefreshTime
                             93 				
   1069 FC 10 0E             94 				ldd		TCNT
   106C F3 16 00             95 				addd	TOC2_Inc
   106F FD 10 18             96 				std		TOC2
                             97 				
                             98 				;get the initial speed from the user
   1072 CC 16 2D             99 				ldd		#SpeedPrompt		;show the prompt
   1075 FD 19 3B            100 				std		sciTxSz
   1078 BD 14 A3            101 				jsr		sciTxString
                            102 				
   107B CE 19 22            103 				ldx		#sciRxSz			;get 2 bytes saying how fast to go
   107E C6 02               104 				ldab	#2
   1080 BD 14 B8            105 				jsr		sciRxString
                            106 				
                            107 				;we now have the ascii representation of the desired speed
                            108 				;in hex. now we need to decode the ascii and combine the 2
                            109 				;chars to form 1 byte
   1083 A6 02               110 				ldaa	2,x					;load both chars
   1085 E6 03               111 				ldab	3,x
                            112 				
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 3
by Simon Walker


   1087 BD 13 C5            113 				jsr		ASCIIByteToHex		;turn A into 4 bit hex
   108A 36                  114 				psha						;swap A and B
   108B 37                  115 				pshb
   108C 32                  116 				pula
   108D 33                  117 				pulb
   108E BD 13 C5            118 				jsr		ASCIIByteToHex
                            119 				
   1091 58                  120 				lslb						;push B into the upper nibble
   1092 58                  121 				lslb
   1093 58                  122 				lslb
   1094 58                  123 				lslb
                            124 				
   1095 1B                  125 				aba							;mash the two together
   1096 B7 19 79            126 				staa	DesSpeed			;save the result
                            127 				;desired speed set!;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            128 				
                            129 				;get the initial time;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1099 CC 16 02            130 				ldd		#TimePrompt			;clear the screen
   109C FD 19 3B            131 				std		sciTxSz				;and show a prompt
   109F BD 14 A3            132 				jsr		sciTxString
                            133 								
   10A2 CE 19 22            134 				ldx		#sciRxSz			;get the current time
   10A5 C6 08               135 				ldab	#8					;from the user in HH:MM:SS
   10A7 BD 14 B8            136 				jsr		sciRxString
                            137 				
                            138 				;we now have the time of day from the user stored the RxBuffer
                            139 				;in ASCII, to be usable we need to decode it into BCD and store
                            140 				;the result in the appropriate variables
                            141 				
   10AA A6 02               142 				ldaa	2,x					;adjust the top nibble of hours
   10AC 80 30               143 				suba	#'0
   10AE 48                  144 				lsla
   10AF 48                  145 				lsla
   10B0 48                  146 				lsla
   10B1 48                  147 				lsla
   10B2 B7 19 72            148 				staa	Hours
                            149 				
   10B5 A6 03               150 				ldaa	3,x					;adjust the bottom nibble of hours
   10B7 80 30               151 				suba	#'0
                            152 				
   10B9 BA 19 72            153 				oraa	Hours				;add the top and bottom nibbles
   10BC B7 19 72            154 				staa	Hours
                            155 				
   10BF A6 05               156 				ldaa	5,x					;adjust the top nibble of minutes
   10C1 80 30               157 				suba	#'0
   10C3 48                  158 				lsla
   10C4 48                  159 				lsla
   10C5 48                  160 				lsla
   10C6 48                  161 				lsla
   10C7 B7 19 73            162 				staa	Minutes
                            163 				
   10CA A6 06               164 				ldaa	6,x					;adjust the bottom nibble of minutes
   10CC 80 30               165 				suba	#'0
                            166 				
   10CE BA 19 73            167 				oraa	Minutes				;add the top and bottom nibbles
   10D1 B7 19 73            168 				staa	Minutes
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 4
by Simon Walker


                            169 				
   10D4 A6 08               170 				ldaa	8,x					;adjust the top nibble of seconds
   10D6 80 30               171 				suba	#'0
   10D8 48                  172 				lsla
   10D9 48                  173 				lsla
   10DA 48                  174 				lsla
   10DB 48                  175 				lsla
   10DC B7 19 74            176 				staa	Seconds
                            177 				
   10DF A6 09               178 				ldaa	9,x					;adjust the bottom nibble of seconds
   10E1 80 30               179 				suba	#'0
                            180 				
   10E3 BA 19 74            181 				oraa	Seconds
   10E6 B7 19 74            182 				staa	Seconds	
                            183 				
                            184 				;time initialized!	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            185 				
   10E9 86 00               186 				ldaa	#0
   10EB B7 19 3D            187 				staa	TxPend				;start TxTask as free
   10EE 86 01               188 				ldaa	#1
   10F0 B7 19 77            189 				staa	Repaint				;show the screen
   10F3 B7 19 76            190 				staa	RefreshTime			;show the time
   10F6 B7 19 78            191 				staa	NewSpeed			;show the speed
   10F9 B7 19 81            192 				staa	PumpRefreshTime
                            193 				
   10FC 86 23               194 				ldaa	#0x23
   10FE B7 19 80            195 				staa	PumpHours
   1101 86 59               196 				ldaa	#0x59
   1103 B7 19 7F            197 				staa	PumpMinutes
   1106 86 50               198 				ldaa	#0x50
   1108 B7 19 7E            199 				staa	PumpSeconds
   110B 86 00               200 				ldaa	#0x0
   110D B7 19 7D            201 				staa	PumpTicks
                            202 				
                            203 				;the time of day has been set up, let the real time loop go!
   1110 0E                  204 				cli							;all set! GO!
   1111 3E                  205 				wai
                            206 				
   1112                     207 loop:			
   1112 BD 13 F5            208 				jsr		TurnOnLED0			;activity on!
   1115 BD 11 30            209 				jsr		Task1ShowTime		;show the time
   1118 BD 11 8A            210 				jsr		Task2SCITx			;send stuff over SCI
   111B BD 11 B1            211 				jsr		Task3RepaintScreen	;show a fancy screen
   111E BD 11 F8            212 				jsr		Task4SCIRx			;get input
   1121 BD 12 69            213 				jsr		Task5Status			;update the status of the screen
                            214 				;jsr		Task6MotorControl	;update the motors speed
                            215 				;jsr		Task7ShowVoltages	;bar graph on the LCD
   1124 BD 12 A8            216 				jsr		Task8PumpTimer
   1127 BD 13 09            217 				jsr		Task9ShowPumpTime
   112A BD 14 16            218 				jsr		TurnOffLED0			;activity off
   112D 3E                  219 				wai
   112E 20 E2               220 				bra		loop
                            221 				
   1130                     222 Task1ShowTime:
   1130 B6 19 76            223 				ldaa	RefreshTime
   1133 81 01               224 				cmpa	#1
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 5
by Simon Walker


   1135 26 52               225 				bne		DoneDisplayTime		;wait for a tick
                            226 				
   1137 B6 19 3D            227 				ldaa	TxPend
   113A 81 00               228 				cmpa	#0
   113C 26 4B               229 				bne		DoneDisplayTime		;wait for the TxTask to be free
                            230 				
   113E 86 01               231 				ldaa	#1
   1140 B7 19 3D            232 				staa	TxPend				;task 1 is now using TxTask
                            233 
   1143 18 CE 16 54         234 				ldy		#CursorToTimePosition	;y will point at the const data
   1147 CE 19 40            235 				ldx		#TxBuffer			;x will point at the TxBuffer
                            236 
   114A                     237 Task1BuildBuffer:
   114A 18 A6 00            238 				ldaa	0,y					;load a byte from the const data
   114D 81 00               239 				cmpa	#0
   114F 27 07               240 				beq		Task1DoneBuildingBuffer	;null char?
                            241 				
   1151 A7 00               242 				staa	0,x					;char is not null, save it
   1153 18 08               243 				iny							;and move on to the next char
   1155 08                  244 				inx
   1156 20 F2               245 				bra		Task1BuildBuffer
                            246 				
   1158                     247 Task1DoneBuildingBuffer:
   1158 B6 19 72            248 				ldaa	Hours				;translate the hours to ASCII
   115B BD 13 D6            249 				jsr		BCDByteToASCII	
                            250 				
   115E A7 00               251 				staa	0,x					;save the ASCII to the TxBuffer
   1160 E7 01               252 				stab	1,x
                            253 				
   1162 86 3A               254 				ldaa	#':					;seperate with a colon
   1164 A7 02               255 				staa	2,x
                            256 				
   1166 B6 19 73            257 				ldaa	Minutes				;translate minutes to ASCII
   1169 BD 13 D6            258 				jsr		BCDByteToASCII
                            259 				
   116C A7 03               260 				staa	3,x					;save the ASCII to the TxBuffer
   116E E7 04               261 				stab	4,x
                            262 				
   1170 86 3A               263 				ldaa	#':					;seperate with a colon
   1172 A7 05               264 				staa	5,x
                            265 				
   1174 B6 19 74            266 				ldaa	Seconds
   1177 BD 13 D6            267 				jsr		BCDByteToASCII		;translate seconds to ASCII
                            268 				
   117A A7 06               269 				staa	6,x					;save the ASCII to the TxBuffer
   117C E7 07               270 				stab	7,x
                            271 				
   117E 6F 08               272 				clr		8,x					;set the null char
   1180 7F 19 76            273 				clr		RefreshTime			;done refreshing time
                            274 				
   1183 CE 19 40            275 				ldx		#TxBuffer			;tell the SCI task where to go
   1186 FF 19 3E            276 				stx		TxPointer
   1189                     277 DoneDisplayTime:
   1189 39                  278 				rts	
                            279 				
   118A                     280 Task2SCITx:
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 6
by Simon Walker


   118A B6 19 3D            281 				ldaa	TxPend				;is there nothing to send?
   118D 81 00               282 				cmpa	#0
   118F 27 1F               283 				beq		Task2Done
                            284 				
   1191 B6 10 2E            285 				ldaa	SCSR				;is the SCI ready?
   1194 84 80               286 				anda	#0b10000000
   1196 81 00               287 				cmpa	#0
   1198 27 16               288 				beq		Task2Done
                            289 				
   119A FE 19 3E            290 				ldx		TxPointer			;get the next byte
   119D A6 00               291 				ldaa	0,x
                            292 
   119F B7 10 2F            293 				staa	SCDR				;send the byte
                            294 
   11A2 81 00               295 				cmpa	#0					;is this the end of the string?
   11A4 27 06               296 				beq		Task2Null
                            297 
   11A6 08                  298 				inx
   11A7 FF 19 3E            299 				stx		TxPointer
   11AA 20 04               300 				bra		Task2Done
                            301 				
   11AC                     302 Task2Null:
   11AC 4F                  303 				clra						;done transmitting, clear pending flag
   11AD B7 19 3D            304 				staa	TxPend
                            305 
   11B0                     306 Task2Done:
   11B0 39                  307 				rts							;done all we can do this tick
                            308 
   11B1                     309 Task3RepaintScreen:
   11B1 B6 19 77            310 				ldaa	Repaint				;is there a need to repaint?
   11B4 81 01               311 				cmpa	#1
   11B6 26 3F               312 				bne		Task3Done
                            313 				
   11B8 B6 19 3D            314 				ldaa	TxPend				;can we repaint?
   11BB 81 00               315 				cmpa	#0
   11BD 26 38               316 				bne		Task3Done
                            317 				
                            318 				;all checks passed,proceed with screen repainting
   11BF 86 03               319 				ldaa	#3
   11C1 B7 19 3D            320 				staa	TxPend
                            321 				
   11C4 CE 16 6F            322 				ldx		#StaticScreen
   11C7 FF 19 3E            323 				stx		TxPointer
                            324 				
   11CA 86 00               325 				ldaa	#0					;repaint has been set up,
   11CC B7 19 77            326 				staa	Repaint				;dont do it again!
                            327 				
   11CF 86 00               328 				ldaa	#0x00				;"Vi:"
   11D1 BD 15 80            329 				jsr		LCDGoDDData	
   11D4 86 56               330 				ldaa	#'V
   11D6 BD 15 56            331 				jsr		LCDSetChar
   11D9 86 69               332 				ldaa	#'i
   11DB BD 15 56            333 				jsr		LCDSetChar
   11DE 86 3A               334 				ldaa	#':
   11E0 BD 15 56            335 				jsr		LCDSetChar
                            336 				
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 7
by Simon Walker


   11E3 86 40               337 				ldaa	#0x40				;"Vo:"
   11E5 BD 15 80            338 				jsr		LCDGoDDData
   11E8 86 56               339 				ldaa	#'V
   11EA BD 15 56            340 				jsr		LCDSetChar
   11ED 86 6F               341 				ldaa	#'o
   11EF BD 15 56            342 				jsr		LCDSetChar
   11F2 86 3A               343 				ldaa	#':
   11F4 BD 15 56            344 				jsr		LCDSetChar
   11F7                     345 Task3Done:
   11F7 39                  346 				rts
                            347 				
   11F8                     348 Task4SCIRx:
   11F8 B6 10 2E            349 				ldaa	SCSR
   11FB 84 20               350 				anda	#0b00100000			;check to see if key received
   11FD 81 00               351 				cmpa	#0
   11FF 27 67               352 				beq		Task4Done			;no key, dont do anything
                            353 				
   1201 B6 10 2F            354 				ldaa	SCDR
   1204 84 DF               355 				anda	#0b11011111			;get key and uppercase
                            356 				
   1206 81 53               357 				cmpa	#'S
   1208 27 11               358 				beq		Task4Stop			;key was 'S'?
                            359 				
   120A 81 52               360 				cmpa	#'R
   120C 27 18               361 				beq		Task4Repaint		;key was 'R'?
                            362 				
   120E 81 55               363 				cmpa	#'U
   1210 27 1D               364 				beq		Task4Up				;key was 'U'?
                            365 				
   1212 81 44               366 				cmpa	#'D
   1214 27 2A               367 				beq		Task4Down			;key was 'D'?
                            368 				
   1216 81 5A               369 				cmpa	#'Z
   1218 27 37               370 				beq		Task4Zero
                            371 				
   121A 39                  372 				rts							;unknown key, do nothing
                            373 				
   121B                     374 Task4Stop:									;stop command
   121B 86 00               375 				ldaa	#0
   121D B7 19 79            376 				staa	DesSpeed			;set the speed to 0,
   1220 86 01               377 				ldaa	#1
   1222 B7 19 78            378 				staa	NewSpeed			;redraw the speed
   1225 39                  379 				rts
   1226                     380 Task4Repaint:								;repaint command
   1226 86 01               381 				ldaa	#1
   1228 B7 19 77            382 				staa	Repaint				;redraw the screen
   122B B7 19 78            383 				staa	NewSpeed			;redraw the speed since it will be cleared
   122E 39                  384 				rts
   122F                     385 Task4Up:									;increase speed command
   122F B6 19 79            386 				ldaa	DesSpeed
   1232 81 FF               387 				cmpa	#0xff				;check if speed is maxed
   1234 27 32               388 				beq		Task4Done
   1236 4C                  389 				inca						;increase speed
   1237 B7 19 79            390 				staa	DesSpeed
   123A 86 01               391 				ldaa	#1
   123C B7 19 78            392 				staa	NewSpeed			;redraw speed
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 8
by Simon Walker


   123F 39                  393 				rts
   1240                     394 Task4Down:									;command to decrease speed
   1240 B6 19 79            395 				ldaa	DesSpeed
   1243 81 00               396 				cmpa	#0
   1245 27 21               397 				beq		Task4Done			;check to see if stopped already
   1247 4A                  398 				deca						;not stopped, slow down
   1248 B7 19 79            399 				staa	DesSpeed
   124B 86 01               400 				ldaa	#1
   124D B7 19 78            401 				staa	NewSpeed			;redraw speed
   1250 39                  402 				rts
                            403 				
   1251                     404 Task4Zero:
   1251 86 00               405 				ldaa	#0
   1253 B7 19 80            406 				staa	PumpHours
   1256 B7 19 7F            407 				staa	PumpMinutes
   1259 B7 19 7E            408 				staa	PumpSeconds
   125C B7 19 7D            409 				staa	PumpTicks
   125F B7 C0 00            410 				staa	LED
   1262 86 01               411 				ldaa	#1
   1264 B7 19 81            412 				staa	PumpRefreshTime
   1267 39                  413 				rts
                            414 				
   1268 39                  415 Task4Done:		rts
                            416 
   1269                     417 Task5Status:
   1269 B6 19 78            418 				ldaa	NewSpeed			;do we need to update the speed?
   126C 81 00               419 				cmpa	#0
   126E 27 37               420 				beq		Task5Done
                            421 				
   1270 B6 19 3D            422 				ldaa	TxPend				;is TxTask busy?
   1273 81 00               423 				cmpa	#0
   1275 26 30               424 				bne		Task5Done
                            425 				
   1277 86 05               426 				ldaa	#5
   1279 B7 19 3D            427 				staa	TxPend
                            428 				
                            429 				;build cursor information
   127C 18 CE 16 66         430 				ldy		#CursorToSpeedPosition	;y will point at the const data
   1280 CE 19 40            431 				ldx		#TxBuffer			;x will point at the TxBuffer
                            432 
   1283                     433 Task5BuildBuffer:
   1283 18 A6 00            434 				ldaa	0,y					;load a byte from the const data
   1286 81 00               435 				cmpa	#0
   1288 27 07               436 				beq		Task5DoneBuildingBuffer	;null char?
                            437 				
   128A A7 00               438 				staa	0,x					;char is not null, save it
   128C 18 08               439 				iny							;and move on to the next char
   128E 08                  440 				inx
   128F 20 F2               441 				bra		Task5BuildBuffer
                            442 				
   1291                     443 Task5DoneBuildingBuffer:
                            444 				;cursor information built, now place the speed into the buffer
   1291 B6 19 79            445 				ldaa	DesSpeed
   1294 BD 13 D6            446 				jsr		BCDByteToASCII		;routine also works with hex
   1297 A7 00               447 				staa	0,x					;MS digit
   1299 E7 01               448 				stab	1,x					;LS digit
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 9
by Simon Walker


   129B 4F                  449 				clra						;null char
   129C A7 02               450 				staa	2,x
   129E B7 19 78            451 				staa	NewSpeed			;speed sent to the screen
                            452 				
   12A1 CE 19 40            453 				ldx		#TxBuffer
   12A4 FF 19 3E            454 				stx		TxPointer
                            455 				
   12A7 39                  456 Task5Done:		rts
                            457 
   12A8                     458 Task8PumpTimer:
   12A8 BD 14 37            459 				jsr		getsw0
   12AB C1 00               460 				cmpb	#0
   12AD 27 53               461 				beq		Task8Done
                            462 				
   12AF B6 19 7D            463 				ldaa	PumpTicks				;do the ticks need to be wrapped?
   12B2 81 99               464 				cmpa	#0x99
   12B4 26 2C               465 				bne		PDontWrapTicks
                            466 				
   12B6 5F                  467 				clrb						;wrap ticks
   12B7 F7 19 7D            468 				stab	PumpTicks
                            469 				
   12BA 86 01               470 				ldaa	#1					;inform the mian program to kindly
   12BC B7 19 81            471 				staa	PumpRefreshTime			;refresh the screen
                            472 				
   12BF B6 19 7E            473 				ldaa	PumpSeconds				;do the seconds need to be wrapped?
   12C2 81 59               474 				cmpa	#0x59
   12C4 26 24               475 				bne		PDontWrapSeconds
                            476 				
   12C6 5F                  477 				clrb						;wrap seconds
   12C7 F7 19 7E            478 				stab	PumpSeconds
                            479 				
   12CA B6 19 7F            480 				ldaa	PumpMinutes				;do the minutes need to be wrapped?
   12CD 81 59               481 				cmpa	#0x59
   12CF 26 21               482 				bne		PDontWrapMinutes
                            483 				
   12D1 5F                  484 				clrb						;wrap minutes
   12D2 F7 19 7F            485 				stab	PumpMinutes
                            486 				
   12D5 B6 19 80            487 				ldaa	PumpHours
   12D8 81 23               488 				cmpa	#0x23
   12DA 26 1E               489 				bne		PDontWrapHours
                            490 				
   12DC 5F                  491 				clrb						;wrap hours
   12DD F7 19 80            492 				stab	PumpHours
                            493 				
   12E0 20 20               494 				bra		Task8Done		;the time has been updated
                            495 				
   12E2                     496 PDontWrapTicks:
   12E2 8B 01               497 				adda	#1					;increment ticks and exit
   12E4 19                  498 				daa
   12E5 B7 19 7D            499 				staa	PumpTicks
   12E8 20 18               500 				bra		Task8Done
                            501 				
   12EA                     502 PDontWrapSeconds:
   12EA 8B 01               503 				adda	#1					;increment seconds and exit
   12EC 19                  504 				daa
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 10
by Simon Walker


   12ED B7 19 7E            505 				staa	PumpSeconds
   12F0 20 10               506 				bra		Task8Done
                            507 				
   12F2                     508 PDontWrapMinutes:
   12F2 8B 01               509 				adda	#1					;increment minutes and exit
   12F4 19                  510 				daa
   12F5 B7 19 7F            511 				staa	PumpMinutes
   12F8 20 08               512 				bra		Task8Done
                            513 				
   12FA                     514 PDontWrapHours:
   12FA 8B 01               515 				adda	#1					;increment hours and exit
   12FC 19                  516 				daa
   12FD B7 19 80            517 				staa	PumpHours
   1300 20 00               518 				bra		Task8Done
                            519 				
   1302                     520 Task8Done:
                            521 				
   1302 B6 19 7D            522 				ldaa	PumpTicks
   1305 B7 C0 00            523 				staa	LED
                            524 				
   1308 39                  525 				rts
                            526 				
   1309                     527 Task9ShowPumpTime:
   1309 B6 19 81            528 				ldaa	PumpRefreshTime
   130C 81 01               529 				cmpa	#1
   130E 26 52               530 				bne		PDoneDisplayTime		;wait for a tick
                            531 				
   1310 B6 19 3D            532 				ldaa	TxPend
   1313 81 00               533 				cmpa	#0
   1315 26 4B               534 				bne		PDoneDisplayTime		;wait for the TxTask to be free
                            535 				
   1317 86 01               536 				ldaa	#1
   1319 B7 19 3D            537 				staa	TxPend				;task 1 is now using TxTask
                            538 
   131C 18 CE 16 5D         539 				ldy		#CursorToPumpPosition	;y will point at the const data
   1320 CE 19 40            540 				ldx		#TxBuffer			;x will point at the TxBuffer
                            541 
   1323                     542 Task9BuildBuffer:
   1323 18 A6 00            543 				ldaa	0,y					;load a byte from the const data
   1326 81 00               544 				cmpa	#0
   1328 27 07               545 				beq		Task9DoneBuildingBuffer	;null char?
                            546 				
   132A A7 00               547 				staa	0,x					;char is not null, save it
   132C 18 08               548 				iny							;and move on to the next char
   132E 08                  549 				inx
   132F 20 F2               550 				bra		Task9BuildBuffer
                            551 				
   1331                     552 Task9DoneBuildingBuffer:
   1331 B6 19 80            553 				ldaa	PumpHours				;translate the hours to ASCII
   1334 BD 13 D6            554 				jsr		BCDByteToASCII	
                            555 				
   1337 A7 00               556 				staa	0,x					;save the ASCII to the TxBuffer
   1339 E7 01               557 				stab	1,x
                            558 				
   133B 86 3A               559 				ldaa	#':					;seperate with a colon
   133D A7 02               560 				staa	2,x
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 11
by Simon Walker


                            561 				
   133F B6 19 7F            562 				ldaa	PumpMinutes				;translate minutes to ASCII
   1342 BD 13 D6            563 				jsr		BCDByteToASCII
                            564 				
   1345 A7 03               565 				staa	3,x					;save the ASCII to the TxBuffer
   1347 E7 04               566 				stab	4,x
                            567 				
   1349 86 3A               568 				ldaa	#':					;seperate with a colon
   134B A7 05               569 				staa	5,x
                            570 				
   134D B6 19 7E            571 				ldaa	PumpSeconds
   1350 BD 13 D6            572 				jsr		BCDByteToASCII		;translate seconds to ASCII
                            573 				
   1353 A7 06               574 				staa	6,x					;save the ASCII to the TxBuffer
   1355 E7 07               575 				stab	7,x
                            576 				
   1357 6F 08               577 				clr		8,x					;set the null char
   1359 7F 19 81            578 				clr		PumpRefreshTime			;done refreshing time
                            579 				
   135C CE 19 40            580 				ldx		#TxBuffer			;tell the SCI task where to go
   135F FF 19 3E            581 				stx		TxPointer
   1362                     582 PDoneDisplayTime:
   1362 39                  583 				rts	
                            584 
                            585 
   1363                     586 OC2I_ISR:
   1363 86 40               587 				ldaa	#0b01000000			;ACK Interrupt
   1365 B7 10 23            588 				staa	TFLG1
                            589 				
   1368 B6 19 75            590 				ldaa	Ticks				;do the ticks need to be wrapped?
   136B 81 99               591 				cmpa	#0x99
   136D 26 2C               592 				bne		DontWrapTicks
                            593 				
   136F 5F                  594 				clrb						;wrap ticks
   1370 F7 19 75            595 				stab	Ticks
                            596 				
   1373 86 01               597 				ldaa	#1					;inform the mian program to kindly
   1375 B7 19 76            598 				staa	RefreshTime			;refresh the screen
                            599 				
   1378 B6 19 74            600 				ldaa	Seconds				;do the seconds need to be wrapped?
   137B 81 59               601 				cmpa	#0x59
   137D 26 24               602 				bne		DontWrapSeconds
                            603 				
   137F 5F                  604 				clrb						;wrap seconds
   1380 F7 19 74            605 				stab	Seconds
                            606 				
   1383 B6 19 73            607 				ldaa	Minutes				;do the minutes need to be wrapped?
   1386 81 59               608 				cmpa	#0x59
   1388 26 21               609 				bne		DontWrapMinutes
                            610 				
   138A 5F                  611 				clrb						;wrap minutes
   138B F7 19 73            612 				stab	Minutes
                            613 				
   138E B6 19 72            614 				ldaa	Hours
   1391 81 23               615 				cmpa	#0x23
   1393 26 1E               616 				bne		DontWrapHours
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 12
by Simon Walker


                            617 				
   1395 5F                  618 				clrb						;wrap hours
   1396 F7 19 72            619 				stab	Hours
                            620 				
   1399 20 20               621 				bra		OC2I_ISR_WrapUp		;the time has been updated
                            622 				
   139B                     623 DontWrapTicks:
   139B 8B 01               624 				adda	#1					;increment ticks and exit
   139D 19                  625 				daa
   139E B7 19 75            626 				staa	Ticks
   13A1 20 18               627 				bra		OC2I_ISR_WrapUp
                            628 				
   13A3                     629 DontWrapSeconds:
   13A3 8B 01               630 				adda	#1					;increment seconds and exit
   13A5 19                  631 				daa
   13A6 B7 19 74            632 				staa	Seconds
   13A9 20 10               633 				bra		OC2I_ISR_WrapUp
                            634 				
   13AB                     635 DontWrapMinutes:
   13AB 8B 01               636 				adda	#1					;increment minutes and exit
   13AD 19                  637 				daa
   13AE B7 19 73            638 				staa	Minutes
   13B1 20 08               639 				bra		OC2I_ISR_WrapUp
                            640 				
   13B3                     641 DontWrapHours:
   13B3 8B 01               642 				adda	#1					;increment hours and exit
   13B5 19                  643 				daa
   13B6 B7 19 72            644 				staa	Hours
   13B9 20 00               645 				bra		OC2I_ISR_WrapUp
                            646 				
   13BB                     647 OC2I_ISR_Wrapup:
   13BB FC 10 18            648 				ldd		TOC2				;set up next interrupt
   13BE F3 16 00            649 				addd	TOC2_INC
   13C1 FD 10 18            650 				std		TOC2
                            651 				
                            652 				;ldaa	Ticks
                            653 				;staa	LED
                            654 				
   13C4 3B                  655 				rti
                            656 				
                            657 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            658 ; ASCIIByteToHex															;
                            659 ;	Purpose		: Translates an ASCII byte to its hex code.					;
                            660 ;	Modifies	: A															;
                            661 ;	Accepts		: Accumulator A. This is the byte to be translated.			;
                            662 ;	Return		: The hex value in the lower nibble of A					;
                            663 ;	Last mod	: 09/19/2007												;
                            664 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   13C5                     665 ASCIIByteToHex:
   13C5 81 40               666 				cmpa	#0x40			;0x30 - 0x39 is 0 - 9
   13C7 25 07               667 				blo		IsANumber
   13C9 81 61               668 				cmpa	#0x61
   13CB 25 06               669 				blo		IsUpperCase		;0x41 - 0x... is A-Z
                            670 				
   13CD 80 57               671 				suba	#0x57			;lower case
   13CF 39                  672 				rts
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 13
by Simon Walker


                            673 				
   13D0                     674 IsANumber:		
   13D0 80 30               675 				suba	#0x30
   13D2 39                  676 				rts
                            677 				
   13D3                     678 IsUpperCase:	
   13D3 80 37               679 				suba	#0x37
   13D5 39                  680 				rts
                            681 
                            682 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            683 ; BCDByteToASCII															;
                            684 ;	Purpose		: Translates a BCD byte into 2 ascii codes					;
                            685 ;	Modifies	: A and B													;
                            686 ;	Accepts		: A is the hex byte to be translated						;
                            687 ;	Return		: The ASCII code in A for the upper nibble in A	and the		;
                            688 ;		lower nibble in B.													;
                            689 ;	Last mod	: Nov 7 2007 - Created										;
                            690 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;				
   13D6                     691 BCDByteToASCII:
   13D6 16                  692 				tab
   13D7 44                  693 				lsra					;move MSB to LSB
   13D8 44                  694 				lsra
   13D9 44                  695 				lsra
   13DA 44                  696 				lsra
   13DB 81 0A               697 				cmpa	#0x0A
   13DD 2C 04               698 				bge		UseLettersA
   13DF 8B 30               699 				adda	#'0
   13E1 20 04               700 				bra		TranslateB
   13E3 80 0A               701 UseLettersA:	suba	#0x0A
   13E5 8B 41               702 				adda	#'A
   13E7 C4 0F               703 TranslateB:		andb	#0x0F			;clear out MSB, work on lower nibble
   13E9 C1 0A               704 				cmpb	#0x0A
   13EB 2C 03               705 				bge		UseLettersB
   13ED CB 30               706 				addb	#'0
   13EF 39                  707 				rts
   13F0 C0 0A               708 UseLettersB:	subb	#0x0A
   13F2 CB 41               709 				addb	#'A
   13F4 39                  710 				rts
                            711 				
                            712 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            713 ; TurnOnLedx																;
                            714 ;	Purpose		: Turns on LEDx, (for led2, assumes bit 7 is configured for	;
                            715 ;				  use as an output											;
                            716 ;	Modifies	: LEDx status												;
                            717 ;	Accepts		: Nothing													;
                            718 ;	Return		: Nothing													;
                            719 ;	Last mod	: 07/03/2007												;
                            720 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   13F5 36                  721 turnonled0:		psha
   13F6 B6 10 00            722 				ldaa	porta
   13F9 8A 20               723 				oraa	#0b00100000
   13FB B7 10 00            724 				staa	pORTA
   13FE 32                  725 				pula
   13FF 39                  726 				rts
                            727 				
   1400 36                  728 turnonled1:		psha
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 14
by Simon Walker


   1401 B6 10 00            729 				ldaa	porta
   1404 8A 40               730 				oraa	#0b01000000
   1406 B7 10 00            731 				staa	porta
   1409 32                  732 				pula
   140A 39                  733 				rts
                            734 				
   140B 36                  735 turnonled2:		psha
   140C B6 10 00            736 				ldaa	porta
   140F 8A 80               737 				oraa	#0b10000000
   1411 B7 10 00            738 				staa	porta
   1414 32                  739 				pula
   1415 39                  740 				rts
                            741 				
                            742 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            743 ; TurnOffLedx																;
                            744 ;	Purpose		: Turns off LEDx, (for led2, assumes bit 7 is configured	;
                            745 ;				  for use as an output										;
                            746 ;	Modifies	: LEDx status												;
                            747 ;	Accepts		: Nothing													;
                            748 ;	Return		: Nothing													;
                            749 ;	Last mod	: 07/03/2007												;
                            750 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1416 36                  751 turnoffled0:	psha
   1417 B6 10 00            752 				ldaa	porta
   141A 84 DF               753 				anda	#0b11011111
   141C B7 10 00            754 				staa	porta
   141F 32                  755 				pula
   1420 39                  756 				rts
                            757 				
   1421 36                  758 turnoffled1:	psha
   1422 B6 10 00            759 				ldaa	porta
   1425 84 BF               760 				anda	#0b10111111
   1427 B7 10 00            761 				staa	porta
   142A 32                  762 				pula
   142B 39                  763 				rts
                            764 				
   142C 36                  765 turnoffled2:	psha
   142D B6 10 00            766 				ldaa	porta
   1430 84 7F               767 				anda	#0b01111111
   1432 B7 10 00            768 				staa	porta
   1435 32                  769 				pula
   1436 39                  770 				rts
                            771 				
                            772 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            773 ; GetSWx																	;
                            774 ;	Purpose		: Gets the status of SWx									;
                            775 ;	Modifies	: B															;
                            776 ;	Accepts		: Nothing													;
                            777 ;	Return		: The status of SWx in B, 01 = down, 00 = up				;
                            778 ;	Last mod	: 07/03/2007												;
                            779 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;						
   1437 36                  780 getsw0:			psha
   1438 B6 10 00            781 				ldaa	porta
   143B 84 01               782 				anda	#0x01
   143D 27 16               783 				beq		SWDOWN
   143F 20 18               784 				bra		swup
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 15
by Simon Walker


                            785 				
   1441 36                  786 getsw1:			psha
   1442 B6 10 00            787 				ldaa	porta
   1445 84 02               788 				anda	#0b00000010
   1447 27 0C               789 				beq		SWDOWN
   1449 20 0E               790 				bra		swup
                            791 				
   144B 36                  792 getsw2:			psha
   144C B6 10 00            793 				ldaa	porta
   144F 84 04               794 				anda	#0b00000100
   1451 27 02               795 				beq		SWDOWN
   1453 20 04               796 				bra		swup
                            797 				
   1455 C6 01               798 swdown:			ldab	#0x01
   1457 32                  799 				pula
   1458 39                  800 				rts
                            801 				
   1459 C6 00               802 swup:			ldab	#0x00
   145B 32                  803 				pula
   145C 39                  804 				rts
                            805 				
                            806 				; ********************************************
                            807 
                            808 ;.------------------------------------------------------------------------.
                            809 ;|                            INCLUDES                                    |
                            810 ;`------------------------------------------------------------------------'
                            811 
                            812 ;.include 'porta.asm'
                            813 ;.include 'delay.asm'
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 16
by Simon Walker


                            815 ;****************************************************************************
                            816 ;*	sci.asm																	*
                            817 ;*																			*
                            818 ;*	Subroutines to interface with the serial port							*
                            819 ;****************************************************************************
                            820 
                            821 ;.--------------------------------------------------------------------------.
                            822 ;|                           EQUATES SECTION								|
                            823 ;`--------------------------------------------------------------------------'
                            824 
   102B                     825 BAUD		=	0x102B			; Baud Select Register
   102C                     826 SCCR1		=	0x102C			; SCI Control Register 1
   102D                     827 SCCR2		=	0x102D			; SCI Control Register 2
   102E                     828 SCSR		=	0x102E			; SCI Status Register
   102F                     829 SCDR		=	0x102F			; SCI Data Register
                            830 
                            831 ;.--------------------------------------------------------------------------.
                            832 ;|							Subroutines										|
                            833 ;`--------------------------------------------------------------------------'
                            834 
                            835 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            836 ; sciInit																	;
                            837 ;	Purpose		: Initialize the serial port to 8N1 @ 9600 baud				;
                            838 ;	Modifies	: Nothing													;
                            839 ;	Accepts		: Nothing													;
                            840 ;	Return		: Nothing													;
                            841 ;	Last mod	: 27/03/2007												;
                            842 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            843 
   145D                     844 sciInit:
   145D 36                  845 				psha
   145E 3C                  846 				pshx
   145F 86 03               847 				ldaa	#0b00000011		;9600 baud
   1461 B7 10 2B            848 				staa	BAUD
   1464 86 00               849 				ldaa	#0	
   1466 B7 10 2C            850 				staa	SCCR1
   1469 86 0C               851 				ldaa	#0x0C
   146B B7 10 2D            852 				staa	SCCR2
   146E 38                  853 				pulx					;done
   146F 32                  854 				pula
   1470 39                  855 				rts
                            856 				
                            857 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            858 ; sciRXPeek																	;
                            859 ;	Purpose		: Check to see if a byte has been recieved on the serial	;
                            860 ;	Modifies	: B															;
                            861 ;	Accepts		: Nothing													;
                            862 ;	Return		: If a byte is waiting to be read, return 1 in B			;
                            863 ;					Otherwise returns 0 in B								;
                            864 ;	Last mod	: 28/03/2007												;
                            865 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            866 
   1471                     867 sciRXPeek:
   1471 3C                  868 				pshx
   1472 CE 10 2E            869 				ldx		#SCSR
   1475 1F 00 20 04         870 				brclr	0,x,#0b00100000,sciRxRegEmpty
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 17
by Simon Walker


   1479 C6 01               871 				ldab	#0x01
   147B 38                  872 				pulx
   147C 39                  873 				rts
   147D C6 00               874 sciRxRegEmpty:	ldab	#0x00
   147F 38                  875 				pulx
   1480 39                  876 				rts
                            877 				
                            878 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            879 ; sciRXByte																	;
                            880 ;	Purpose		: Recieves a byte from the serial port. Blocks the program	;
                            881 ;					until a byte is recieved								;
                            882 ;	Modifies	: sciRxBuf													;
                            883 ;	Accepts		: Nothing													;
                            884 ;	Return		: The byte recieved in sciRxBuf								;
                            885 ;	Last mod	: 28/03/2007												;
                            886 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            887 
   1481 37                  888 sciRXByte:		pshb
   1482 BD 14 71            889 sciRXByteLoop:	jsr		sciRXPeek
   1485 C1 00               890 				cmpb	#0x00
   1487 27 F9               891 				beq		sciRXByteLoop
   1489 F6 10 2F            892 				ldab	SCDR
   148C F7 19 39            893 				stab	sciRxBuf
   148F 33                  894 				pulb
   1490 39                  895 				rts
                            896 				
                            897 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            898 ; sciTxByte																	;
                            899 ;	Purpose		: Sends a byte through the serial port. Blocks the program	;
                            900 ;					until the byte is sent									;
                            901 ;	Modifies	: Nothing													;
                            902 ;	Accepts		: The byte to be sent in sciTxBuf							;
                            903 ;	Return		: Nothing													;
                            904 ;	Last mod	: 28/03/2007												;
                            905 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            906 
   1491 36                  907 sciTxByte:		psha
   1492 3C                  908 				pshx
   1493 CE 10 2E            909 				ldx		#SCSR
                            910 				
                            911 				;Wait until the link is clear
   1496 1F 00 80 FC         912 sciTxByteLoop:	brclr	0,x,#0b10000000,sciTxByteLoop
   149A B6 19 3A            913 				ldaa	sciTxBuf	;Link is clear, send the byte
   149D B7 10 2F            914 				staa	SCDR
   14A0 38                  915 				pulx				;Done
   14A1 32                  916 				pula
   14A2 39                  917 				rts
                            918 				
                            919 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            920 ; sciTXString																;
                            921 ;	Purpose		: Transmits a null terminated string through the sci		;
                            922 ;	Modifies	: Nothing													;
                            923 ;	Accepts		: A pointer to a null terminated string in sciTxString		;
                            924 ;	Return		: Nothing													;
                            925 ;	Last mod	: 28/03/2007												;
                            926 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 18
by Simon Walker


                            927 
   14A3                     928 sciTxString:
   14A3 36                  929 				psha
   14A4 3C                  930 				pshx
   14A5 FE 19 3B            931 				ldx		sciTxSz
                            932 				
   14A8                     933 sciTxStringLoop:
   14A8 A6 00               934 				ldaa	0,x
   14AA 27 09               935 				beq		sciTxStringDone
   14AC B7 19 3A            936 				staa	sciTxBuf
   14AF BD 14 91            937 				jsr		sciTxByte
   14B2 08                  938 				inx
   14B3 20 F3               939 				bra		sciTxStringLoop
                            940 				
   14B5                     941 sciTxStringDone:
   14B5 38                  942 				pulx
   14B6 32                  943 				pula
   14B7 39                  944 				rts
                            945 				
                            946 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            947 ; sciRXString																;
                            948 ;	Purpose		: Recieves a null terminated string from the SCI. Requires	;
                            949 ;				  a buffer of max length + 3 bytes.							;
                            950 ;	Modifies	: The contents of the buffer.								;
                            951 ;	Accepts		: A pointer to a null terminated string in X, the max		;
                            952 ;				  string length in B.										;
                            953 ;	Return		: Nothing													;
                            954 ;	Last mod	: 17/09/2007												;
                            955 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   14B8                     956 sciRXString:
   14B8 18 3C               957 				pshy			;Save the registers we will be using
   14BA 3C                  958 				pshx
   14BB 37                  959 				pshb
   14BC 36                  960 				psha
                            961 				
   14BD 3C                  962 				pshx
   14BE 18 38               963 				puly			;Set x to point to the start of characters
   14C0 08                  964 				inx				;and y to point to the start of the buffer
   14C1 08                  965 				inx
                            966 				
   14C2 18 E7 00            967 				stab	0,y		;set the max chars for the buffer
                            968 				
   14C5 18 6F 01            969 				clr		1,y		;there are no chars in the buffer
                            970 				
   14C8                     971 sciRxStringNext:
   14C8 BD 14 81            972 				jsr		sciRxByte	;get a char from the SCI
   14CB B6 19 39            973 				ldaa	sciRxBuf
                            974 				
   14CE 81 0D               975 				cmpa	#0x0D	;Is the new char a return key?
   14D0 27 32               976 				beq		sciRXStringReturn
                            977 				
   14D2 81 08               978 				cmpa	#0x08	;Is the new char a backspace?
   14D4 27 17               979 				beq		sciRxStringBS
                            980 				
   14D6 18 E1 01            981 				cmpb	1,y		;compare max size to current len
   14D9 27 ED               982 				beq		sciRxStringNext	;string is full, get another char
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 19
by Simon Walker


                            983 				
   14DB A7 00               984 				staa	0,x		;buffer can accept another char, save it
   14DD B7 19 3A            985 				staa	sciTxBuf
   14E0 BD 14 91            986 				jsr		sciTxByte	;echo the byte to the screen
   14E3 08                  987 				inx				;move x to point to the next empty char
   14E4 18 A6 01            988 				ldaa	1,y		;increment the character count
   14E7 4C                  989 				inca
   14E8 18 A7 01            990 				staa	1,y
                            991 				
   14EB 20 DB               992 				bra		sciRxStringNext		;get another char
                            993 				
   14ED                     994 sciRxStringBS:
   14ED 18 A6 01            995 				ldaa	1,y
   14F0 27 D6               996 				beq		sciRxStringNext	;dont erase from an empty buffer
                            997 				
   14F2 09                  998 				dex			;go a char back
   14F3 4A                  999 				deca			;one less char in the counter
   14F4 18 A7 01           1000 				staa	1,y
                           1001 				
   14F7 3C                 1002 				pshx			;save x while we clean up the terminal
   14F8 CE 15 0C           1003 				ldx		#sciBackspace	;Erase the character on the screen
   14FB FF 19 3B           1004 				stx		sciTxSz
   14FE BD 14 A3           1005 				jsr		sciTxString
   1501 38                 1006 				pulx			;restore x to point to the character buffer
                           1007 				
   1502 20 C4              1008 				bra		sciRxStringNext		;grab a new character
                           1009 				
   1504                    1010 sciRxStringReturn:
   1504 6F 00              1011 				clr		0,x		;add the null
                           1012 				
   1506 32                 1013 				pula			;restore registers
   1507 33                 1014 				pulb
   1508 38                 1015 				pulx
   1509 18 38              1016 				puly
                           1017 				
   150B 39                 1018 				rts				;done
                           1019 				
                           1020 				
                           1021 ;.------------------------------------------------------------------------.
                           1022 ;|                            CONSTANT  DATA                              |
                           1023 ;`------------------------------------------------------------------------'
   150C 1B 5B 44 1B 5B 4B  1024 sciBackspace:	.asciz	"\e[D\e[K"
        00
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 20
by Simon Walker


                           1026 ;****************************************************************************
                           1027 ;*	LCD.asm																	*
                           1028 ;*																			*
                           1029 ;*	Subroutines for writing to the LCD										*
                           1030 ;****************************************************************************
                           1031 
                           1032 ;.--------------------------------------------------------------------------.
                           1033 ;|							Subroutines										|
                           1034 ;`--------------------------------------------------------------------------'
                           1035 
                           1036 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           1037 ; LcdWait																	;
                           1038 ;	Purpose		: Waits until the LCD is free.								;
                           1039 ;	Modifies	: Nothing													;
                           1040 ;	Accepts		: Nothing													;
                           1041 ;	Return		: Nothing													;
                           1042 ;	Last mod	: 04/04/2007												;
                           1043 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1513 36                 1044 LCDWait:		psha
   1514 B6 80 00           1045 LCDWaitLoop:	ldaa	LCDIR
   1517 2B FB              1046 				bmi		LCDWaitLoop	;wait if the MSB of LCDIR is set
   1519 32                 1047 				pula
   151A 39                 1048 				rts
                           1049 				
                           1050 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           1051 ; LcdInit																	;
                           1052 ;	Purpose		: Fully inits the LCD										;
                           1053 ;	Modifies	: LCD is cleared with the cursor set to 0,0					;
                           1054 ;	Accepts		: Nothing													;
                           1055 ;	Return		: Nothing													;
                           1056 ;	Last mod	: 04/04/2007												;
                           1057 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   151B                    1058 LCDInit:		
   151B 36                 1059 				psha
   151C BD 15 13           1060 				jsr		LCDWait
   151F 86 38              1061 				ldaa	#0x38		;8 bit, 2 line, 5*8 chars
   1521 B7 80 00           1062 				staa	LCDIR
                           1063 				
   1524 BD 15 13           1064 				jsr		LCDWait
   1527 86 0C              1065 				ldaa	#0x0C		;display on, cursor off, no blink
   1529 B7 80 00           1066 				staa	LCDIR
                           1067 				
   152C BD 15 13           1068 				jsr		LCDWait
   152F 86 06              1069 				ldaa	#0x06		; increment, no shift
   1531 B7 80 00           1070 				staa	LCDIR
                           1071 				
   1534 BD 15 39           1072 				jsr		LCDReset	;clear and home the LCD
   1537 32                 1073 				pula
   1538 39                 1074 				rts
                           1075 				
                           1076 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           1077 ; LCDReset																	;
                           1078 ;	Purpose		: Resets the LCD to be cleared and the cursor is at home	;
                           1079 ;	Modifies	: LCD is cleared with the cursor set to 0,0					;
                           1080 ;	Accepts		: Nothing													;
                           1081 ;	Return		: Nothing													;
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 21
by Simon Walker


                           1082 ;	Last mod	: 04/04/2007												;
                           1083 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1539                    1084 LCDReset:		
   1539 BD 15 40           1085 				jsr		LCDClear
   153C BD 15 4B           1086 				jsr		LCDHome
   153F 39                 1087 				rts
                           1088 				
                           1089 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           1090 ; LCDClear																	;
                           1091 ;	Purpose		: Clears the LCD											;
                           1092 ;	Modifies	: LCD is cleared											;
                           1093 ;	Accepts		: Nothing													;
                           1094 ;	Return		: Nothing													;
                           1095 ;	Last mod	: 04/04/2007												;
                           1096 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1540                    1097 LCDClear:
   1540 36                 1098 				psha
   1541 BD 15 13           1099 				jsr		LCDWait
   1544 86 01              1100 				ldaa	#0x01		;Clear display command
   1546 B7 80 00           1101 				staa	LCDIR
   1549 32                 1102 				pula
   154A 39                 1103 				rts
                           1104 
                           1105 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           1106 ; LCDHome																	;
                           1107 ;	Purpose		: Sets the LCD cursor to home								;
                           1108 ;	Modifies	: LCD cursor												;
                           1109 ;	Accepts		: Nothing													;
                           1110 ;	Return		: Nothing													;
                           1111 ;	Last mod	: 04/04/2007												;
                           1112 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   154B                    1113 LCDHome:
   154B 36                 1114 				psha
   154C BD 15 13           1115 				jsr		LCDWait
   154F 86 02              1116 				ldaa	#0x02		;Return home command
   1551 B7 80 00           1117 				staa	LCDIR
   1554 32                 1118 				pula
   1555 39                 1119 				rts
                           1120 				
                           1121 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           1122 ; LCDSetChar																;
                           1123 ;	Purpose		: Sends a character to the LCD								;
                           1124 ;	Modifies	: LCD cursor, LCD display									;
                           1125 ;	Accepts		: The character to be sent in A								;
                           1126 ;	Return		: Nothing													;
                           1127 ;	Last mod	: 04/04/2007												;
                           1128 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1556                    1129 LCDSetChar:
   1556 BD 15 13           1130 				jsr		LCDWait
   1559 B7 80 01           1131 				staa	LCDDR
   155C 39                 1132 				rts
                           1133 				
                           1134 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           1135 ; LCDShiftRight																;
                           1136 ;	Purpose		: Shifts the LCD display to the right						;
                           1137 ;	Modifies	: Position of the LCD window								;
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 22
by Simon Walker


                           1138 ;	Accepts		: Nothing													;
                           1139 ;	Return		: Nothing													;
                           1140 ;	Last mod	: 04/04/2007												;
                           1141 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   155D                    1142 LCDShiftRight:	
   155D 36                 1143 				psha
   155E 86 1C              1144 				ldaa	#0b00011100
   1560 BD 15 13           1145 				jsr		LCDWait
   1563 B7 80 00           1146 				staa	LCDIR
   1566 32                 1147 				pula
   1567 39                 1148 				rts
                           1149 
                           1150 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           1151 ; LCDShiftLeft																;
                           1152 ;	Purpose		: Shifts the LCD display to the left						;
                           1153 ;	Modifies	: Position of the LCD window								;
                           1154 ;	Accepts		: Nothing													;
                           1155 ;	Return		: Nothing													;
                           1156 ;	Last mod	: 04/04/2007												;
                           1157 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1568                    1158 LCDShiftLeft:
   1568 36                 1159 				psha
   1569 86 18              1160 				ldaa	#0b00011000
   156B BD 15 13           1161 				jsr		LCDWait
   156E B7 80 00           1162 				staa	LCDIR
   1571 32                 1163 				pula
   1572 39                 1164 				rts
                           1165 
                           1166 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           1167 ; LCDGoCGData																;
                           1168 ;	Purpose		: Sets the LCD to accept CG data							;
                           1169 ;	Modifies	: What the LCD is expecting to recieve						;
                           1170 ;	Accepts		: The address of the character that will be modified in A	;
                           1171 ;	Return		: Nothing													;
                           1172 ;	Last mod	: 04/04/2007												;
                           1173 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1573                    1174 LCDGoCGData:
   1573 36                 1175 				psha
   1574 84 7F              1176 				anda	#0x7F			;clear the msbit
   1576 8A 40              1177 				oraa	#0b01000000		;set bit 7
   1578 BD 15 13           1178 				jsr		LCDWait
   157B B7 80 00           1179 				staa	LCDIR
   157E 32                 1180 				pula
   157F 39                 1181 				rts
                           1182 
                           1183 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           1184 ; LCDGoDDData																;
                           1185 ;	Purpose		: Sets the LCD to accept display data						;
                           1186 ;	Modifies	: What the LCD is expecting to recieve						;
                           1187 ;	Accepts		: The address of the character that will be displayed		;
                           1188 ;	Return		: Nothing													;
                           1189 ;	Last mod	: 04/04/2007												;
                           1190 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1580                    1191 LCDGoDDData:
   1580 36                 1192 				psha
   1581 8A 80              1193 				oraa	#0b10000000		;set the msbit
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 23
by Simon Walker


   1583 BD 15 13           1194 				jsr		LCDWait
   1586 B7 80 00           1195 				staa	LCDIR
   1589 32                 1196 				pula
   158A 39                 1197 				rts
                           1198 
                           1199 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           1200 ; LCDDDString																;
                           1201 ;	Purpose		: Send a string to the LCD									;
                           1202 ;	Modifies	: LCD cursor, LCD display									;
                           1203 ;	Accepts		: The address of the start of the string to be sent in X	;
                           1204 ;	Return		: Nothing													;
                           1205 ;	Last mod	: 04/04/2007												;
                           1206 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   158B                    1207 LCDDDString:
   158B 3C                 1208 				pshx
   158C 36                 1209 				psha
   158D                    1210 LCDDDStringLoop:
   158D A6 00              1211 				ldaa	0,x
   158F 81 00              1212 				cmpa	#0
   1591 27 06              1213 				beq		LCDDDStringDone
   1593 BD 15 56           1214 				jsr		LCDSetChar
   1596 08                 1215 				inx
   1597 20 F4              1216 				bra		LCDDDStringLoop
   1599                    1217 LCDDDStringDone:
   1599 32                 1218 				pula
   159A 38                 1219 				pulx
   159B 39                 1220 				rts
                           1221 				
                           1222 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           1223 ; LCDCreate																	;
                           1224 ;	Purpose		: Loads the custom character data into the LCD				;
                           1225 ;	Modifies	: LCD display (possibly), LCD custom characters				;
                           1226 ;	Accepts		: The address of the start of the character data in X.		;
                           1227 ;				  How many characters to load in bytes (1 char = 8 bytes) 	;
                           1228 ;				  in Acc B													;
                           1229 ;	Return		: Nothing													;
                           1230 ;	Last mod	: 08/30/2007												;
                           1231 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   159C                    1232 LCDCreate:
   159C 36                 1233 				psha					;Preserve regs
   159D 37                 1234 				pshb
   159E 3C                 1235 				pshx
                           1236 				
   159F 86 00              1237 				ldaa	#0x00
   15A1 BD 15 73           1238 				jsr		LCDGoCGData
   15A4                    1239 LCDCreate_MoreBytes:
   15A4 C1 00              1240 				cmpb	#0				;Check for more bytes to write
   15A6 27 09              1241 				beq		LCDCreate_Done
   15A8 5A                 1242 				decb
   15A9 A6 00              1243 				ldaa	0,x				;load a byte
   15AB BD 15 56           1244 				jsr		LCDSetChar		;send it to the LCD
   15AE 08                 1245 				inx						;go to the next byte
   15AF 20 F3              1246 				bra		LCDCreate_MoreBytes
   15B1                    1247 LCDCreate_Done:
   15B1 38                 1248 				pulx					;clean up
   15B2 33                 1249 				pulb
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 24
by Simon Walker


   15B3 32                 1250 				pula
   15B4 39                 1251 				rts
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 25
by Simon Walker


                           1253 ;****************************************************************************
                           1254 ;*	spi.asm																	*
                           1255 ;*																			*
                           1256 ;*	Subroutines to be used for sending data to the DAC over the SPI			*
                           1257 ;****************************************************************************
                           1258 
                           1259 ;.--------------------------------------------------------------------------.
                           1260 ;|							Equates											|
                           1261 ;`--------------------------------------------------------------------------'
                           1262 
   102A                    1263 SPDR			=	0x102A	;Data Register
   1028                    1264 SPCR			=	0x1028	;Control Register
   1029                    1265 SPSR			=	0x1029	;Status Register
   1009                    1266 DDRD			=	0x1009	;Data Direction Register
   1008                    1267 PORTD			=	0x1008	;Port D
                           1268 
                           1269 ;.--------------------------------------------------------------------------.
                           1270 ;|							Subroutines										|
                           1271 ;`--------------------------------------------------------------------------'
                           1272 
                           1273 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           1274 ; spi_init																	;
                           1275 ;	Purpose		: Initiliazes the SPI										;
                           1276 ;	Modifies	: SPCR, DDRD												;
                           1277 ;	Accepts		: Nothing													;
                           1278 ;	Return		: Nothing													;
                           1279 ;	Last mod	: 13/09/2007												;
                           1280 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   15B5                    1281 spi_init:
   15B5 36                 1282 				psha			;Save A
                           1283 				
   15B6 86 5C              1284 				ldaa	#0x5C	;Enable the SPI and set the speed
   15B8 B7 10 28           1285 				staa	SPCR
                           1286 				
   15BB 86 38              1287 				ldaa	#0x38	;Make the proper pins inputs/outputs
   15BD B7 10 09           1288 				staa	DDRD
                           1289 				
   15C0 32                 1290 				pula			;Restore registers and exit
   15C1 39                 1291 				rts
                           1292 
                           1293 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           1294 ; spi_data																	;
                           1295 ;	Purpose		: Sends data contained in AccD to the DAC through the SPI	;
                           1296 ;	Modifies	: Output of the DAC											;
                           1297 ;	Accepts		: the lower 12 bits of AccD at 1 mV / bit					;
                           1298 ;	Return		: Nothing													;
                           1299 ;	Last mod	: 13/09/2007												;
                           1300 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   15C2                    1301 spi_data:
   15C2 3C                 1302 				pshx			;Save registers
   15C3 36                 1303 				psha
                           1304 				
   15C4 B7 10 2A           1305 				staa	SPDR	;Send first byte to the DAC
                           1306 				
   15C7 B6 10 29           1307 wait1:			ldaa	SPSR	;Block until everything is sent
   15CA 2A FB              1308 				bpl		wait1
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 26
by Simon Walker


                           1309 				
   15CC F7 10 2A           1310 				stab	SPDR	;Send second byte to the DAC
                           1311 				
   15CF B6 10 29           1312 wait2:			ldaa	SPSR	;Block until all the bits are sent
   15D2 2A FB              1313 				bpl		wait2
                           1314 				
   15D4 CE 10 08           1315 				ldx		#PORTD	;clear and set SS* to change the DAC output
   15D7 1D 00 20           1316 				bclr	0,x,#0b00100000
   15DA 1C 00 20           1317 				bset	0,x,#0b00100000
                           1318 				
   15DD 32                 1319 				pula			;done!
   15DE 38                 1320 				pulx
   15DF 39                 1321 				rts
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 27
by Simon Walker


                           1323 ;****************************************************************************
                           1324 ;*	adc.asm																	*
                           1325 ;*																			*
                           1326 ;*	Subroutines to be used for sending data to the DAC over the SPI			*
                           1327 ;****************************************************************************
                           1328 
                           1329 ;.--------------------------------------------------------------------------.
                           1330 ;|							Equates											|
                           1331 ;`--------------------------------------------------------------------------'
                           1332 
   1039                    1333 OPTION		=	0x1039			;Option register, contains ADPU and CSEL
   1030                    1334 ADCTL		=	0x1030			;Control register for the A/D subsystem
   1031                    1335 ADR1		=	0x1031			;A/D result register 1
   1032                    1336 ADR2		=	0x1032			;A/D result register 2
   1033                    1337 ADR3		=	0x1033			;A/D result register 3
   1034                    1338 ADR4		=	0x1034			;A/D result register 4
                           1339 
                           1340 ;.--------------------------------------------------------------------------.
                           1341 ;|							Subroutines										|
                           1342 ;`--------------------------------------------------------------------------'
                           1343 
                           1344 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           1345 ; adc_init																	;
                           1346 ;	Purpose		: Initiliazes the A/D converter subsystem					;
                           1347 ;	Modifies	: OPTION, turns on the charge pump and sets the A/D to use	;
                           1348 ;				  ECLK instead of the internal RC clock						;
                           1349 ;	Accepts		: Nothing													;
                           1350 ;	Return		: Nothing													;
                           1351 ;	Last mod	: Oct 4 2007												;
                           1352 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   15E0                    1353 adc_init:
   15E0 3C                 1354 				pshx			;Save x
   15E1 36                 1355 				psha
   15E2 37                 1356 				pshb
                           1357 				
   15E3 CE 10 39           1358 				ldx		#OPTION		;Turn on the A/D
   15E6 1C 00 80           1359 				bset	0,x,#0x80
                           1360 				
                           1361 				;Wait at least 100 micro seconds for the charge pump
                           1362 				;to initialize
   15E9 03                 1363 				fdiv				;165 cycles
   15EA 03                 1364 				fdiv				;need at least 130 or so
   15EB 03                 1365 				fdiv
   15EC 03                 1366 				fdiv
   15ED 03                 1367 				fdiv
                           1368 				
   15EE 33                 1369 				pulb
   15EF 32                 1370 				pula
   15F0 38                 1371 				pulx
   15F1 39                 1372 				rts
                           1373 				
                           1374 
                           1375 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           1376 ; adc_sample																;
                           1377 ;	Purpose		: Samples channel 0 of the ADC and returns the value in	A	;
                           1378 ;	Modifies	: Accumulator A												;
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 28
by Simon Walker


                           1379 ;	Accepts		: Nothing													;
                           1380 ;	Return		: The value sampled in AccA									;
                           1381 ;	Last mod	: Oct 4 2007												;
                           1382 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   15F2                    1383 adc_sample:
   15F2 86 00              1384 				ldaa	#0			;No scanning, no multiple channel
                           1385 									;channel 0
                           1386 									
   15F4 B7 10 30           1387 				staa	ADCTL
   15F7                    1388 adc_sample_delay:
   15F7 B6 10 30           1389 				ldaa	ADCTL		;Wait for the CCF to be set
   15FA 2A FB              1390 				bpl		adc_sample_delay
                           1391 				
   15FC B6 10 34           1392 				ldaa	ADR4		;return best result
   15FF 39                 1393 				rts
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 29
by Simon Walker


                           1394 
                           1395 ;.------------------------------------------------------------------------.
                           1396 ;|                            CONSTANT  DATA                              |
                           1397 ;`------------------------------------------------------------------------'
                           1398 
   1600 30 00              1399 TOC2_INC:		.dw		12288		;((1/100 Hz)/813.802 ns) = 12288.0
                           1400 
   1602 1B 5B 32 4A 1B 5B  1401 TimePrompt:		.asciz	"\e[2J\e[HEnter the time in HH:MM:SS format: "
        48 45 6E 74 65 72
        20 74 68 65 20 74
        69 6D 65 20 69 6E
        20 48 48 3A 4D 4D
        3A 53 53 20 66 6F
        72 6D 61 74 3A 20
        00
   162D 1B 5B 32 4A 1B 5B  1402 SpeedPrompt:	.asciz	"\e[2J\e[HEnter the initial motor speed: "
        48 45 6E 74 65 72
        20 74 68 65 20 69
        6E 69 74 69 61 6C
        20 6D 6F 74 6F 72
        20 73 70 65 65 64
        3A 20 00
   1654                    1403 CursorToTimePosition:
   1654 1B 5B 31 37 3B 36  1404 				.asciz	"\e[17;63H"
        33 48 00
   165D                    1405 CursorToPumpPosition:
   165D 1B 5B 31 37 3B 33  1406 				.asciz	"\e[17;37H"
        37 48 00
   1666                    1407 CursorToSpeedPosition:
   1666 1B 5B 31 33 3B 32  1408 				.asciz	"\e[13;27H"
        37 48 00
                           1409 				
   166F 1B 5B 32 4A 1B 5B  1410 StaticScreen:	.ascii	"\e[2J\e[?25l\e[02;33HMicro Design 2"
        3F 32 35 6C 1B 5B
        30 32 3B 33 33 48
        4D 69 63 72 6F 20
        44 65 73 69 67 6E
        20 32
   168F 1B 5B 30 33 3B 32  1411 				.ascii	"\e[03;29HReal-time Programming"
        39 48 52 65 61 6C
        2D 74 69 6D 65 20
        50 72 6F 67 72 61
        6D 6D 69 6E 67
   16AC 1B 5B 30 34 3B 33  1412 				.ascii	"\e[04;30HBy Addison Babcock"
        30 48 42 79 20 41
        64 64 69 73 6F 6E
        20 42 61 62 63 6F
        63 6B
   16C6 1B 5B 30 36 3B 33  1413 				.ascii	"\e[06;37HMenu"
        37 48 4D 65 6E 75
   16D2 1B 5B 30 37 3B 30  1414 				.ascii	"\e[07;05H----------------------------------------------------------------------"
        35 48 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 30
by Simon Walker


        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
   1720 1B 5B 30 38 3B 30  1415 				.ascii	"\e[08;06HS . . . . . . . . . . . . . . . . . . . . . . . . . . Stop the Motor"
        36 48 53 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 53 74 6F 70
        20 74 68 65 20 4D
        6F 74 6F 72
   176C 1B 5B 30 39 3B 30  1416 				.ascii	"\e[09;06HR . . . . . . . . . . . . . . . . . . . . . . . . Repaint the Screen"
        36 48 52 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 52 65
        70 61 69 6E 74 20
        74 68 65 20 53 63
        72 65 65 6E
   17B8 1B 5B 31 30 3B 30  1417 				.ascii	"\e[10;06HU . . . . . . . . . . . . . . . . . . . . . . . Increase Motor Speed"
        36 48 55 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 49 6E 63 72
        65 61 73 65 20 4D
        6F 74 6F 72 20 53
        70 65 65 64
   1804 1B 5B 31 31 3B 30  1418 				.ascii	"\e[11;06HD . . . . . . . . . . . . . . . . . . . . . . . Decrease Motor Speed"
        36 48 44 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 44 65 63 72
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 31
by Simon Walker


        65 61 73 65 20 4D
        6F 74 6F 72 20 53
        70 65 65 64
   1850 1B 5B 31 32 3B 30  1419 				.ascii	"\e[12;06HZ . . . . . . . . . . . . . . . . . . . . . . . . . .Zero pump timer"
        36 48 5A 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 20 2E 20 2E 20
        2E 5A 65 72 6F 20
        70 75 6D 70 20 74
        69 6D 65 72
   189C 1B 5B 31 33 3B 30  1420 				.ascii	"\e[13;06HDesired Motor Speed>"
        36 48 44 65 73 69
        72 65 64 20 4D 6F
        74 6F 72 20 53 70
        65 65 64 3E
   18B8 1B 5B 31 36 3B 33  1421 				.ascii	"\e[16;37HPump Timer"
        37 48 50 75 6D 70
        20 54 69 6D 65 72
   18CA 1B 5B 31 36 3B 35  1422 				.ascii	"\e[16;59HRTL Time of Day"
        39 48 52 54 4C 20
        54 69 6D 65 20 6F
        66 20 44 61 79
   18E1 1B 5B 31 37 3B 36  1423 				.asciz	"\e[17;63HHH:MM:SS"
        33 48 48 48 3A 4D
        4D 3A 53 53 00
                           1424 				
   18F2                    1425 CharacterData:
   18F2 00 00 00 00 00 00  1426 				.db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        00 00
   18FA 10 10 10 10 10 10  1427 				.db 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10
        10 10
   1902 18 18 18 18 18 18  1428 				.db 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18
        18 18
   190A 1C 1C 1C 1C 1C 1C  1429 				.db 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C
        1C 1C
   1912 1E 1E 1E 1E 1E 1E  1430 				.db 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E
        1E 1E
   191A 1F 1F 1F 1F 1F 1F  1431 				.db 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F
        1F 1F
                           1432 
                           1433 ;
                           1434 ;							    Micro Design 2
                           1435 ;							Real-Time Programming
                           1436 ;							 By Addison Babcock
                           1437 ;
                           1438 ;									Menu
                           1439 ;	----------------------------------------------------------------------
                           1440 ;	 S . . . . . . . . . . . . . . . . . . . . . . . . . . Stop the Motor
                           1441 ;	 R . . . . . . . . . . . . . . . . . . . . . . . . Repaint the Screen
                           1442 ;    U . . . . . . . . . . . . . . . . . . . . . . . Increase Motor Speed
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 32
by Simon Walker


                           1443 ;	 D . . . . . . . . . . . . . . . . . . . . . . . Decrease Motor Speed
                           1444 ;
                           1445 ;	 Desired Motor Speed> __
                           1446 ;
                           1447 ;
                           1448 ;														  RTL Time of Day
                           1449 ;														      12:04:23    
                           1450 
                           1451 ;.------------------------------------------------------------------------.
                           1452 ;|                             VARIABLES                                  |
                           1453 ;`------------------------------------------------------------------------'
                           1454 
   0000                    1455 .if TARGETROM == 1
                           1456 	.ORG    0
                           1457 .endif
                           1458 
   1922                    1459 sciRxSz:		.ds	23		;String to be recieved from the SCI
   1939                    1460 sciRxBuf:		.ds	1		;Byte recieve through the SCI
   193A                    1461 sciTxBuf:		.ds	1		;Send this byte through the SCI
   193B                    1462 sciTxSz:		.ds	2		;Pointer to the null terminated string to be sent
                           1463 
   193D                    1464 TxPend:			.ds 1		;If non zero, there is a transmission in progress
                           1465 							;and the number represents the task sending data
                           1466 							
   193E                    1467 TxPointer:		.ds	2		;Pointer which holds the address of the next
                           1468 							;byte to send.
                           1469 							
   1940                    1470 TxBuffer:		.ds	50		;The SCI transmit buffer
                           1471 
   1972                    1472 Hours:			.ds	1		;Holds the BCD variable for hours (0x00-0x23)
   1973                    1473 Minutes:		.ds	1		;Holds the BCD variable for minutes (0-0x59)
   1974                    1474 Seconds:		.ds	1		;Holds the BCD variable for seconds (0-0x59)
   1975                    1475 Ticks:			.ds	1		;Holds the BCD variable for hundredths (0-0x99)
   1976                    1476 RefreshTime:	.ds	1		;A flag to indicate to the main program that 
                           1477 							;a second has elapsed and the screen should be
                           1478 							;refreshed.
   1977                    1479 Repaint:		.ds	1		;a flag to indicate that the screen needs to be
                           1480 							;repainted
   1978                    1481 NewSpeed:		.ds	1		;a flag to indicate that the desired motor speed
                           1482 							;has changed and needs to be redrawn
   1979                    1483 DesSpeed:		.ds	1		;the users desired motor speed
   197A                    1484 Vin:			.ds	1		;A copy of the sampled motor speed 00-ff
   197B                    1485 Vout:			.ds	1		;A copy of the value sent to the motor 00-ff
   197C                    1486 Diff:			.ds	1		;Difference between desired speed and actual speed
                           1487 
   197D                    1488 PumpTicks:		.ds	1
   197E                    1489 PumpSeconds:	.ds	1
   197F                    1490 PumpMinutes:	.ds	1
   1980                    1491 PumpHours:		.ds	1
   1981                    1492 PumpRefreshTime:.ds	1
                           1493 
                           1494 ;.------------------------------------------------------------------------.
                           1495 ;|                           RESET VECTOR                                 |
                           1496 ;`------------------------------------------------------------------------'
                           1497 
                           1498 				.AREA	RESETVEC (ABS)
AS68HC11 Assembler - Computer Engineering Tech.  -  Version: 1.56gb    Page 33
by Simon Walker


                           1499 
                           1500 ;				.if TARGETROM == 1
                           1501 ;					.org	RESETVEC		 ;Place the reset vector so that
                           1502 ;					.DW		Main		     ;we can run this from power-up.
                           1503 ;					.org	0xffe6
                           1504 ;					.dw		OC2I_ISR
                           1505 ;				.endif
                           1506 ;
                           1507 ;				.if TARGETROM == 0
                           1508 					.org	0x7fe6
   7FE6 13 63              1509 					.dw		OC2I_ISR
                           1510 ;				.endif

   Input File: boil.asm
   Directory:  C:\DOCUME~1\ABABCO~1\DESKTOP\START_~1
   Date:       2007/12/13
   Time:        8:52:48